package com.study.controller.permissions;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.PageInfo;
import com.study.model.permissions.Dept;
import com.study.service.permissions.impl.DeptServiceImpl;
import com.study.util.bean.DataGridResultInfo;
import com.study.util.bean.PageBean;
import com.study.util.permissions.ResultUtil;
import com.study.util.tool.StringUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@Api(value = "Deptcontroller", description = "部门操作API")
@RestController
@RequestMapping("/dept")
public class DeptController {
	private static Logger logger = LoggerFactory.getLogger(DeptController.class);

	@Autowired
	private DeptServiceImpl deptService;

	@ApiOperation(value = "获取所有部门", notes = "获取所有部门API")
	@RequestMapping(value = "/getData", method = { RequestMethod.GET })
	public DataGridResultInfo getData(HttpServletRequest request, @ModelAttribute PageBean bean,
			@ModelAttribute Dept dept) {
		List<Dept> selectAllDept = deptService.selectAllDept(dept, bean);
		PageInfo<Dept> pageInfo = new PageInfo<Dept>(selectAllDept);
		return ResultUtil.createDataGridResult(pageInfo.getTotal(), pageInfo.getList());
	}

	@ApiOperation(value = "获取所有部门树", notes = "获取所有部门树API")
	@RequestMapping(value = "/getDataTree", method = { RequestMethod.GET })
	public List<Dept> getDataTree(HttpServletRequest request, @ModelAttribute PageBean bean,
			@ModelAttribute Dept dept) {
		List<Dept> selectAllDept = deptService.selectAllDept(dept, bean);
		return selectAllDept;
	}

	@ApiOperation(value = "添加部门", notes = "保存添加API")
	@RequestMapping(value = "/add", method = { RequestMethod.POST })
	public String add(HttpServletRequest request) {
		try {
			String name = request.getParameter("name");
			String code = request.getParameter("code");
			String parentId = request.getParameter("parentId");
			Dept dept = new Dept();
			dept.setCode(code);
			dept.setName(name);
			dept.setParentId(StringUtil.nullZero(parentId));
			deptService.insertDept(dept);
			return "success";
		} catch (Exception e) {
			e.printStackTrace();
			return "fail";
		}
	}

	@ApiOperation(value = "修改部门", notes = "保存修改API")
	@RequestMapping(value = "/edit", method = { RequestMethod.POST })
	public String edit(HttpServletRequest request) {
		try {
			String id = request.getParameter("id");
			String name = request.getParameter("name");
			String code = request.getParameter("code");
			String parentId = request.getParameter("parentId");
			logger.info("dept=====>edit:" + id);
			Dept dept = new Dept();
			dept.setId(StringUtil.nullZero(id));
			dept.setCode(code);
			dept.setName(name);
			dept.setParentId(StringUtil.nullZero(parentId));
			deptService.updateNotNull(dept);
			return "success";
		} catch (Exception e) {
			e.printStackTrace();
			return "fail";
		}
	}

	@ApiOperation(value = "删除部门", notes = "根据id删除API")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "ids", value = "部门id", required = true, dataType = "string", paramType = "query") })
	@RequestMapping(value = "delete", method = { RequestMethod.DELETE })
	public String delete(HttpServletRequest request, @RequestParam(value = "ids") String ids) {
		try {
			if (ids != null) {
				String[] idsArry = ids.split(",");
				for (String id : idsArry) {
					deptService.delete(Integer.parseInt(id));
				}
			}
			return "success";
		} catch (Exception e) {
			e.printStackTrace();
			return "fail";
		}
	}

}
